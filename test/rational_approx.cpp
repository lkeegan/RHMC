#include "catch.hpp"
#include "su3.hpp"
#include "4d.hpp"
#include "hmc.hpp"
#include "dirac_op.hpp"
#include "inverters.hpp"
#include "io.hpp"

// if true, tests should run quickly, for use with every compile
// if false, does extended tests that may be quite slow
constexpr bool QUICK_TESTS_ONLY = true;
// tolerance for numbers that should be zero:
constexpr double EPS = 5.e-13;

constexpr double n_max = 64;
std::vector< std::vector< double > > alpha (n_max+1);
std::vector< std::vector< double > > beta (n_max+1);
std::vector< std::vector< double > > alpha_inv (n_max+1);
std::vector< std::vector< double > > beta_inv (n_max+1);

TEST_CASE( "Rational Approximations", "[rational_approx]") {

	std::vector<int> n_values;
	if(QUICK_TESTS_ONLY) {
		n_values = {1, 2, 3};
	} else {
		n_values = {1, 2, 3, 4, 12, 32, 64};
	}

	// Approx to x^(1/(2*1)) in range [4.000000e-02,1.600000e+01] with degree 16 and relative error 2.885009e-16
	alpha[1] = {4.7294329623439950e+01, -1.0129521534439727e-04, -4.8047642574926562e-04, -1.4150584308803686e-03, -3.5757806588400023e-03, -8.4927340238365127e-03, -1.9639247915780866e-02, -4.4977520935139653e-02, -1.0313606558066742e-01, -2.3924153867478326e-01, -5.6901927733927982e-01, -1.4175100692930140e+00, -3.8375477157878417e+00, -1.2092715671692911e+01, -5.1119271640429709e+01, -4.1718634594376294e+02, -3.4648843932780655e+04};
	beta[1] = {2.8912421816215520e-03, 1.2403461746987787e-02, 3.1298817705967145e-02, 6.5080105860400847e-02, 1.2363821205843364e-01, 2.2427946519742042e-01, 3.9722521686873463e-01, 6.9582328205290411e-01, 1.2164075904392238e+00, 2.1398263981737795e+00, 3.8277264673091840e+00, 7.0794243050776533e+00, 1.3961533062140832e+01, 3.1352782043286425e+01, 9.5542863235820690e+01, 9.0119415546199070e+02};
	alpha_inv[1] = {2.1144183836879705e-02, 3.4130449091347347e-02, 3.6561463264869844e-02, 4.1602792003828146e-02, 4.9630381148303745e-02, 6.1255895108978449e-02, 7.7398821724846134e-02, 9.9416823990711792e-02, 1.2935056525399369e-01, 1.7041296584693336e-01, 2.2804044495341463e-01, 3.1234590448309046e-01, 4.4445938180773870e-01, 6.7540513250371925e-01, 1.1556025590654118e+00, 2.4984821322586246e+00, 9.6941553771835807e+00};
	beta_inv[1] = {7.1016883112375343e-04, 6.6985641661202891e-03, 2.0412861580079249e-02, 4.5840238113640491e-02, 9.0402831137125911e-02, 1.6720108018844601e-01, 2.9908968341833886e-01, 5.2613943305706201e-01, 9.1977376513156139e-01, 1.6111766645758840e+00, 2.8535826917397209e+00, 5.1763931987104810e+00, 9.8340344032756022e+00, 2.0448056728928243e+01, 5.1598498310798249e+01, 2.2135814290072935e+02};
	// Approx to x^(1/(2*2)) in range [4.000000e-02,1.600000e+01] with degree 16 and relative error 2.016961e-16
	alpha[2] = {6.5746146186425358e+00, -2.5165218288312639e-04, -9.0389105481414431e-04, -2.1589664887161960e-03, -4.5781230032395179e-03, -9.2883287316164777e-03, -1.8524119257332390e-02, -3.6766233409630707e-02, -7.3198200697048743e-02, -1.4732771661854852e-01, -3.0302658710852093e-01, -6.4811809913724838e-01, -1.4857907219082129e+00, -3.8604057009465818e+00, -1.2723759549847127e+01, -6.9995993918969191e+01, -1.8630010572534084e+03};
	beta[2] = {2.2535567271296194e-03, 1.0839693817472653e-02, 2.8339600392070560e-02, 5.9845407413171903e-02, 1.1456825349666805e-01, 2.0864702744782188e-01, 3.7024388731507019e-01, 6.4896417209536339e-01, 1.1340400948355536e+00, 1.9919342850700532e+00, 3.5521866855649629e+00, 6.5316880269831499e+00, 1.2738077011899048e+01, 2.7940623098293532e+01, 8.0085311965120681e+01, 5.5045898258087402e+02};
	alpha_inv[2] = {1.5210016982051955e-01, 4.3994476639273280e-03, 7.8091258503689828e-03, 1.1662140245601705e-02, 1.7023944248830140e-02, 2.4919639529854445e-02, 3.6753403781935118e-02, 5.4646921537860070e-02, 8.1971450323729128e-02, 1.2436378868922732e-01, 1.9191473747742821e-01, 3.0447255048624383e-01, 5.0634202329276912e-01, 9.1466230564068229e-01, 1.9235055227618927e+00, 5.5044893876644396e+00, 3.5456731036077294e+01};
	beta_inv[2] = {1.1626661027481198e-03, 7.9914778914607631e-03, 2.2905716803398271e-02, 5.0243062544068108e-02, 9.7983859203943438e-02, 1.8017071079084074e-01, 3.2129573992321353e-01, 5.6435394384605608e-01, 9.8618695379373567e-01, 1.7285903209399180e+00, 3.0673813465185851e+00, 5.5861897206856961e+00, 1.0694220787594418e+01, 2.2583240100275813e+01, 5.9042258091125710e+01, 2.8399551353436544e+02};
	// Approx to x^(1/(2*3)) in range [4.000000e-02,1.600000e+01] with degree 16 and relative error 1.423209e-16
	alpha[3] = {3.4924968548570439e+00, -2.7657547010209661e-04, -8.9794906727118601e-04, -1.9937336837112002e-03, -3.9818021870707855e-03, -7.6594402155842388e-03, -1.4534813602514367e-02, -2.7500017703307983e-02, -5.2230565328296098e-02, -1.0027955446897355e-01, -1.9656014482829715e-01, -3.9977474408919089e-01, -8.6786579037362710e-01, -2.1183047846257410e+00, -6.4518490728925650e+00, -3.1486343123676413e+01, -6.2487759246664677e+02};
	beta[3] = {2.0546704543163070e-03, 1.0339663677517916e-02, 2.7390254894697246e-02, 5.8167009072868960e-02, 1.1166448619992976e-01, 2.0365098350160346e-01, 3.6163724168549533e-01, 6.3404967240634691e-01, 1.1078962958940772e+00, 1.9451711914811740e+00, 3.4655565459452400e+00, 6.3610495097286277e+00, 1.2362941761790479e+01, 2.6926069665729738e+01, 7.5817054955941629e+01, 4.8215610596691238e+02};
	alpha_inv[3] = {2.8632810323344798e-01, 1.8531173458500843e-03, 3.7763454386779334e-03, 6.1350990806783978e-03, 9.5549432500914820e-03, 1.4786940646427974e-02, 2.2948414558969780e-02, 3.5814848407535162e-02, 5.6324518359782395e-02, 8.9569772923194416e-02, 1.4496727949967825e-01, 2.4161269786842066e-01, 4.2349686373779738e-01, 8.1135240205287906e-01, 1.8321385391794878e+00, 5.7905816572538251e+00, 4.5166102840551368e+01};
	beta_inv[3] = {1.3273709325251593e-03, 8.4413724639121526e-03, 2.3768786456590155e-02, 5.1767614240327151e-02, 1.0061232804762488e-01, 1.8467452240789747e-01, 3.2901988411244376e-01, 5.7767139611520879e-01, 1.0093846394890016e+00, 1.7697292375562033e+00, 3.1426315208291689e+00, 5.7314551992305915e+00, 1.1002800559991616e+01, 2.3365974594267250e+01, 6.1897564559240578e+01, 3.1148547381675394e+02};
	// Approx to x^(1/(2*4)) in range [4.000000e-02,1.600000e+01] with degree 16 and relative error 1.088475e-16
	alpha[4] = {2.5515950470307911e+00, -2.6513130800305486e-04, -8.1683355839207031e-04, -1.7474148391721082e-03, -3.3857910050700307e-03, -6.3407998551861921e-03, -1.1736233413059552e-02, -2.1679184701355936e-02, -4.0216293443650186e-02, -7.5413500506695832e-02, -1.4430962447564533e-01, -2.8623742125626012e-01, -6.0478472764536628e-01, -1.4312073967683141e+00, -4.1932139694490544e+00, -1.9310156250470133e+01, -3.3460626017680130e+02};
	beta[4] = {1.9577853395395407e-03, 1.0093536362115354e-02, 2.6922329285922222e-02, 5.7339884565918632e-02, 1.1023426645348049e-01, 2.0119180079957444e-01, 3.5740376690303638e-01, 6.2671930019457067e-01, 1.0950595870531949e+00, 1.9222416221385474e+00, 3.4231648696991441e+00, 6.2778195074329686e+00, 1.2180984887560289e+01, 2.6439155527549612e+01, 7.3818152971236316e+01, 4.5316129189807629e+02};
	alpha_inv[4] = {3.9191171857919532e-01, 1.1026455439308658e-03, 2.3980979423447258e-03, 4.0593765823552282e-03, 6.5274753515393571e-03, 1.0384620793641249e-02, 1.6530205580854933e-02, 2.6429370569255612e-02, 4.2557986644236885e-02, 6.9288854228344618e-02, 1.1485030998611041e-01, 1.9620752510302436e-01, 3.5311672616728507e-01, 6.9687357312620768e-01, 1.6314667725698475e+00, 5.4256821135330169e+00, 4.6809968350913181e+01};
	beta_inv[4] = {1.4123006784611846e-03, 8.6699541269933955e-03, 2.4206522002305247e-02, 5.2540907480608877e-02, 1.0194622499774594e-01, 1.8696148866947460e-01, 3.3294461665437369e-01, 5.8444308197167594e-01, 1.0211908262619425e+00, 1.7906918148784705e+00, 3.1810441452212190e+00, 5.8058171981403248e+00, 1.1161515319484961e+01, 2.3772088707594040e+01, 6.3406914785797831e+01, 3.2689998595582711e+02};
	// Approx to x^(1/(2*12)) in range [4.000000e-02,1.600000e+01] with degree 15 and relative error 3.525229e-16
	alpha[12] = {1.3587474581367713e+00, -1.6385092227809799e-04, -4.5954216762159994e-04, -9.3358100507211759e-04, -1.7533477320621463e-03, -3.2172649988056693e-03, -5.8707738804263518e-03, -1.0737106445754440e-02, -1.9802735886357500e-02, -3.7133713797218706e-02, -7.1771862415657681e-02, -1.4652516862586742e-01, -3.3078889252381222e-01, -9.0569094037753284e-01, -3.7411769287916576e+00, -5.0406627738011018e+01};
	beta[12] = {2.0085895325518211e-03, 1.0995479715344619e-02, 3.0157712608517455e-02, 6.5834400215685429e-02, 1.2988983153143763e-01, 2.4384339407569816e-01, 4.4667172318255688e-01, 8.0995557704713073e-01, 1.4690016101503245e+00, 2.6927689293464407e+00, 5.0625403633176580e+00, 1.0017411989525062e+01, 2.2002004185260539e+01, 6.1256382215061933e+01, 3.5520168673336440e+02};
	alpha_inv[12] = {7.3597193798712535e-01, 2.6049141397531758e-04, 6.5007186166875675e-04, 1.2198638067128205e-03, 2.1492931543112938e-03, 3.7276149133244566e-03, 6.4537457085723313e-03, 1.1219658819840508e-02, 1.9681518525397169e-02, 3.5088608585028228e-02, 6.4376768445717658e-02, 1.2433469564394005e-01, 2.6376556541225393e-01, 6.6928488758951665e-01, 2.4782939316189134e+00, 2.6480263871169072e+01};
	beta_inv[12] = {1.8017932456509483e-03, 1.0447890927561742e-02, 2.9088259169987127e-02, 6.3888756963298585e-02, 1.2641874514963589e-01, 2.3767356828323694e-01, 4.3567004663426351e-01, 7.9016679202735940e-01, 1.4328196005781835e+00, 2.6246353829922495e+00, 4.9272525220351744e+00, 9.7213614448258667e+00, 2.1221768650293608e+01, 5.8205736954510058e+01, 3.1863155195621738e+02};
	// Approx to x^(1/(2*32)) in range [4.000000e-02,1.600000e+01] with degree 15 and relative error 1.325084e-16
	alpha[32] = {1.1218089944141361e+00, -7.1083260671962419e-05, -1.9236351627079668e-04, -3.8130833655108714e-04, -7.0205196856020207e-04, -1.2657785288514611e-03, -2.2721796825981339e-03, -4.0903098348205125e-03, -7.4266780709243514e-03, -1.3708164392361541e-02, -2.6066757283637883e-02, -5.2299632408119336e-02, -1.1578779538671846e-01, -3.0952610226853894e-01, -1.2350887121049920e+00, -1.5445045608934686e+01};
	beta[32] = {1.9431227022387806e-03, 1.0823063676865139e-02, 2.9821180489674002e-02, 6.5222070303394206e-02, 1.2879710101174849e-01, 2.4190043853363377e-01, 4.4320590550790095e-01, 8.0371890363522958e-01, 1.4575919145776366e+00, 2.6712656783487936e+00, 5.0197862785644078e+00, 9.9236397039702773e+00, 2.1753804214559096e+01, 6.0276590501321643e+01, 3.4305794453168835e+02};
	alpha_inv[32] = {8.9141734910250858e-01, 8.4579019202547312e-05, 2.1908326613443560e-04, 4.2153657220732799e-04, 7.5775571557128651e-04, 1.3376318284505752e-03, 2.3542970132403814e-03, 4.1582999665945534e-03, 7.4095979633752038e-03, 1.3420031685982608e-02, 2.5025212426207220e-02, 4.9176086103507315e-02, 1.0636249417676846e-01, 2.7633446202520456e-01, 1.0583533571977461e+00, 1.2133198462799761e+01};
	beta_inv[32] = {1.8655740530179824e-03, 1.0617720655350724e-02, 2.9420141584784024e-02, 6.4492466382465211e-02, 1.2749546783155707e-01, 2.3958680156277354e-01, 4.3908037194721372e-01, 7.9629830417733483e-01, 1.4440240801091737e+00, 2.6457165761235881e+00, 4.9690559412639352e+00, 9.8126293296564349e+00, 2.1461256378553120e+01, 5.9132979266123442e+01, 3.2936674522026846e+02};
	// Approx to x^(1/(2*64)) in range [4.000000e-02,1.600000e+01] with degree 14 and relative error 6.297295e-16
	alpha[64] = {1.0580508123237373e+00, -4.2654177597978331e-05, -1.1623005717601768e-04, -2.3519512499253753e-04, -4.4549108677018122e-04, -8.2988076195504232e-04, -1.5436232825470331e-03, -2.8882400294162748e-03, -5.4777827564583530e-03, -1.0661066284694281e-02, -2.1777616442952931e-02, -4.8758935081606065e-02, -1.3077809770589580e-01, -5.1891033535374964e-01, -6.3550832888887898e+00};
	beta[64] = {2.2029792658325043e-03, 1.2452002606038520e-02, 3.4920038056040603e-02, 7.8137396153003039e-02, 1.5861897289799934e-01, 3.0751491027884070e-01, 5.8381619520622074e-01, 1.1016958478996297e+00, 2.0917726325357888e+00, 4.0563065607432227e+00, 8.2385048956513405e+00, 1.8454873702690787e+01, 5.1897207342828061e+01, 2.9650520242030154e+02};
	alpha_inv[64] = {9.4513419237754415e-01, 4.6424881519084529e-05, 1.2373670207944864e-04, 2.4660793917361565e-04, 4.6137238486745284e-04, 8.5004711472641840e-04, 1.5648253866213555e-03, 2.8985151333193980e-03, 5.4422087869531672e-03, 1.0483424152168266e-02, 2.1183592973860840e-02, 4.6861409020218625e-02, 1.2387198354117852e-01, 4.8143120720742671e-01, 5.6446230713085397e+00};
	beta_inv[64] = {2.1584781473506435e-03, 1.2332070120309565e-02, 3.4679186122345870e-02, 7.7683998262575688e-02, 1.5777900176330240e-01, 3.0596059535598219e-01, 5.8092258514012973e-01, 1.0962354337805473e+00, 2.0811998983063189e+00, 4.0348262777590609e+00, 8.1907003753592971e+00, 1.8327585982950851e+01, 5.1397355128213363e+01, 2.9051567117593572e+02};

	double eps = 1.e-15;

	hmc_params hmc_pars = {
		5.4, 	// beta
		0.2, 	// mass
		0.0557, // mu_I
		1.0, 	// tau
		3, 		// n_steps
		1.e-6,	// MD_eps
		1234,	// seed
		false, 	// EE: only simulate even-even sub-block (requires mu_I=0)
		false,	// constrained HMC (fixed allowed range for pion susceptibility)
		3.0, 	// suscept_central
		0.05	// suscept_eps
	};

	// Loop over 3 setups: LEXI (default), EO, EO w/EO preconditioning
	field<fermion>::eo_storage_options eo_storage_e = field<fermion>::FULL;
	std::string lt ("LEXI_FULL");
	bool isEO = false;
	for (int lattice_type : {0, 1, 2}) {
		if(lattice_type==1) {
			isEO = true;
			lt = "EO_FULL";
		} else if(lattice_type==2) {
			isEO = true;
			eo_storage_e = field<fermion>::EVEN_ONLY;				
			lt = "EO_EVEN_ONLY";
		}

		lattice grid (4, isEO);
		field<gauge> U (grid);
		hmc rhmc (hmc_pars);
		rhmc.random_U(U, 10.0);
		dirac_op D (grid, hmc_pars.mass, hmc_pars.mu_I);

		field<fermion> x (grid, eo_storage_e);
		field<fermion> y (grid, eo_storage_e);

		field<fermion> B (grid, eo_storage_e);
		rhmc.gaussian_fermion(B);

		for(int n : n_values) {
			SECTION( std::string("A^{1/(2n)}_") + lt + " n=" + std::to_string(n) ) {
			int N_shifts = beta[n].size();
			std::vector< field<fermion> > X;
			for(int i=0; i<N_shifts; ++i) {
				X.push_back(B);
			}
			y = B;
			// y = [A^{1/2n}]^{2n} B = A B:
			for(int i=0; i<n; ++i) {
				// x = A^{1/2n} B:
				x = y;
				x *= alpha[n][0];
				int iter = cg_multishift(X, y, U, beta[n], D, eps);
				for(int i=0; i<N_shifts; ++i) {
					x.add(alpha[n][i+1], X[i]);
				}

				// y = A^{1/2n} x = A^{1/n} B:
				iter = cg_multishift(X, x, U, beta[n], D, eps);
				y = x;
				y *= alpha[n][0];
				for(int i=0; i<N_shifts; ++i) {
					y.add(alpha[n][i+1], X[i]);
				}
			}
			// x = A^-1 y = B
			int iter = cg(x, y, U, D, eps);
			x -= B;
			double res = x.norm()/B.norm();
			INFO("Lattice-type: " << lattice_type << "\t|| b - A^-1 [A^{1/2m} A^{1/2m}]^n b ||_{n=" << n << "} = " << res);
			REQUIRE( res < EPS );				
			}

			SECTION( std::string("A^{-1/(2n)}_") + lt + " n=" + std::to_string(n) ) {
			int N_shifts = beta_inv[n].size();
			std::vector< field<fermion> > X;
			for(int i=0; i<N_shifts; ++i) {
				X.push_back(B);
			}
			y = B;
			// y = [A^{-1/2n}]^{2n} B = A^{-1} B:
			for(int i=0; i<n; ++i) {
				// x = A^{-1/2n} B:
				x = y;
				x *= alpha_inv[n][0];
				int iter = cg_multishift(X, y, U, beta_inv[n], D, eps);
				for(int i=0; i<N_shifts; ++i) {
					x.add(alpha_inv[n][i+1], X[i]);
				}

				// y = A^{-1/2n} x = A^{-1/n} B:
				iter = cg_multishift(X, x, U, beta_inv[n], D, eps);
				y = x;
				y *= alpha_inv[n][0];
				for(int i=0; i<N_shifts; ++i) {
					y.add(alpha_inv[n][i+1], X[i]);
				}
			}
			// x = A y = B
			D.DDdagger(x, y, U);

			x -= B;
			double res = x.norm()/B.norm();
			INFO("Lattice-type: " << lattice_type << "\t|| b - A [A^{-1/2n} A^{-1/2n}]^n b ||_{n=" << n << "} = " << res);
			REQUIRE( res < EPS );				
			}
		}
	}
}